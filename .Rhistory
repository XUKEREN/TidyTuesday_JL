loudness,
tempo
),
value=value) %>%
group_by(playlist_name) %>%
#  distinct(playlist_name)
# filter(playlist_name %in% c("Groove")) %>%
#arrange(metric) %>%
arrange(factor(metric, levels = order)) %>%
ggplot(aes(x=metric,y=value,group=interaction(playlist_name,metric),fill=playlist_name,color=playlist_name)) +
geom_polygon(aes(group=track.name),alpha=.01,size=.2)+
#geom_point(position="jitter") +
#geom_boxplot() +
scale_x_discrete(limits = order )+
#  scale_fill_manual(values=c("blue","red","yellow")) +
coord_polar()+
theme_minimal() +
labs(title= "Qualities of Songs per Playlist")+
theme(axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text.y = element_blank(),
plot.title = element_markdown(family=fonts[i],
hjust=.5),
text = element_markdown(family=fonts[i]))
warnings()
i <- 5
radardf %>%
mutate(danceability = scale(danceability,center=F,scale=max(danceability,na.rm = T)/100),
energy = scale(energy,center=F,scale=max(energy,na.rm = T)/100),
loudness = scale((loudness+40),center=F,scale=max((loudness+40),na.rm = T)/100),
speechiness = scale(speechiness,center=F,scale=max(speechiness,na.rm = T)/100),
acousticness = scale(acousticness,center=F,scale=max(acousticness,na.rm = T)/100),
valence = scale(valence,center=F,scale=max(valence,na.rm = T)/100),
tempo = scale(tempo,center=F,scale=max(tempo,na.rm = T)/100),
liveness =scale(liveness, center=F,scale = max(liveness, na.rm=T)/100),
instrumentalness = scale(instrumentalness,center=F,scale=max(instrumentalness,na.rm = T)/100)
) %>%
gather(key = metric,c(danceability,
energy,
# speechiness,
acousticness,
instrumentalness,
#liveness,
valence,
loudness,
tempo
),
value=value) %>%
group_by(playlist_name) %>%
#  distinct(playlist_name)
# filter(playlist_name %in% c("Groove")) %>%
#arrange(metric) %>%
arrange(factor(metric, levels = order)) %>%
ggplot(aes(x=metric,y=value,group=interaction(playlist_name,metric),fill=playlist_name,color=playlist_name)) +
geom_polygon(aes(group=track.name),alpha=.01,size=.2)+
#geom_point(position="jitter") +
#geom_boxplot() +
scale_x_discrete(limits = order )+
#  scale_fill_manual(values=c("blue","red","yellow")) +
coord_polar()+
theme_minimal() +
labs(title= "Qualities of Songs per Playlist")+
theme(axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text.y = element_blank(),
plot.title = element_markdown(family=fonts[i],
hjust=.5),
text = element_markdown(family=fonts[i]))
fonts <- names(pdfFonts())
warnings()
quartz()
radardf %>%
mutate(danceability = scale(danceability,center=F,scale=max(danceability,na.rm = T)/100),
energy = scale(energy,center=F,scale=max(energy,na.rm = T)/100),
loudness = scale((loudness+40),center=F,scale=max((loudness+40),na.rm = T)/100),
speechiness = scale(speechiness,center=F,scale=max(speechiness,na.rm = T)/100),
acousticness = scale(acousticness,center=F,scale=max(acousticness,na.rm = T)/100),
valence = scale(valence,center=F,scale=max(valence,na.rm = T)/100),
tempo = scale(tempo,center=F,scale=max(tempo,na.rm = T)/100),
liveness =scale(liveness, center=F,scale = max(liveness, na.rm=T)/100),
instrumentalness = scale(instrumentalness,center=F,scale=max(instrumentalness,na.rm = T)/100)
) %>%
gather(key = metric,c(danceability,
energy,
# speechiness,
acousticness,
instrumentalness,
#liveness,
valence,
loudness,
tempo
),
value=value) %>%
group_by(playlist_name) %>%
#  distinct(playlist_name)
# filter(playlist_name %in% c("Groove")) %>%
#arrange(metric) %>%
arrange(factor(metric, levels = order)) %>%
ggplot(aes(x=metric,y=value,group=interaction(playlist_name,metric),fill=playlist_name,color=playlist_name)) +
geom_polygon(aes(group=track.name),alpha=.01,size=.2)+
#geom_point(position="jitter") +
#geom_boxplot() +
scale_x_discrete(limits = order )+
#  scale_fill_manual(values=c("blue","red","yellow")) +
coord_polar()+
theme_minimal() +
labs(title= "Qualities of Songs per Playlist")+
theme(axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text.y = element_blank(),
plot.title = element_markdown(family=fonts[i],
hjust=.5),
text = element_markdown(family=fonts[i]))
warnings()
i <- 6
radardf %>%
mutate(danceability = scale(danceability,center=F,scale=max(danceability,na.rm = T)/100),
energy = scale(energy,center=F,scale=max(energy,na.rm = T)/100),
loudness = scale((loudness+40),center=F,scale=max((loudness+40),na.rm = T)/100),
speechiness = scale(speechiness,center=F,scale=max(speechiness,na.rm = T)/100),
acousticness = scale(acousticness,center=F,scale=max(acousticness,na.rm = T)/100),
valence = scale(valence,center=F,scale=max(valence,na.rm = T)/100),
tempo = scale(tempo,center=F,scale=max(tempo,na.rm = T)/100),
liveness =scale(liveness, center=F,scale = max(liveness, na.rm=T)/100),
instrumentalness = scale(instrumentalness,center=F,scale=max(instrumentalness,na.rm = T)/100)
) %>%
gather(key = metric,c(danceability,
energy,
# speechiness,
acousticness,
instrumentalness,
#liveness,
valence,
loudness,
tempo
),
value=value) %>%
group_by(playlist_name) %>%
#  distinct(playlist_name)
# filter(playlist_name %in% c("Groove")) %>%
#arrange(metric) %>%
arrange(factor(metric, levels = order)) %>%
ggplot(aes(x=metric,y=value,group=interaction(playlist_name,metric),fill=playlist_name,color=playlist_name)) +
geom_polygon(aes(group=track.name),alpha=.01,size=.2)+
#geom_point(position="jitter") +
#geom_boxplot() +
scale_x_discrete(limits = order )+
#  scale_fill_manual(values=c("blue","red","yellow")) +
coord_polar()+
theme_minimal() +
labs(title= "Qualities of Songs per Playlist")+
theme(axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text.y = element_blank(),
plot.title = element_markdown(family=fonts[i],
hjust=.5),
text = element_markdown(family=fonts[i]))
i <- 7
radardf %>%
mutate(danceability = scale(danceability,center=F,scale=max(danceability,na.rm = T)/100),
energy = scale(energy,center=F,scale=max(energy,na.rm = T)/100),
loudness = scale((loudness+40),center=F,scale=max((loudness+40),na.rm = T)/100),
speechiness = scale(speechiness,center=F,scale=max(speechiness,na.rm = T)/100),
acousticness = scale(acousticness,center=F,scale=max(acousticness,na.rm = T)/100),
valence = scale(valence,center=F,scale=max(valence,na.rm = T)/100),
tempo = scale(tempo,center=F,scale=max(tempo,na.rm = T)/100),
liveness =scale(liveness, center=F,scale = max(liveness, na.rm=T)/100),
instrumentalness = scale(instrumentalness,center=F,scale=max(instrumentalness,na.rm = T)/100)
) %>%
gather(key = metric,c(danceability,
energy,
# speechiness,
acousticness,
instrumentalness,
#liveness,
valence,
loudness,
tempo
),
value=value) %>%
group_by(playlist_name) %>%
#  distinct(playlist_name)
# filter(playlist_name %in% c("Groove")) %>%
#arrange(metric) %>%
arrange(factor(metric, levels = order)) %>%
ggplot(aes(x=metric,y=value,group=interaction(playlist_name,metric),fill=playlist_name,color=playlist_name)) +
geom_polygon(aes(group=track.name),alpha=.01,size=.2)+
#geom_point(position="jitter") +
#geom_boxplot() +
scale_x_discrete(limits = order )+
#  scale_fill_manual(values=c("blue","red","yellow")) +
coord_polar()+
theme_minimal() +
labs(title= "Qualities of Songs per Playlist")+
theme(axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text.y = element_blank(),
plot.title = element_markdown(family=fonts[i],
hjust=.5),
text = element_markdown(family=fonts[i]))
i <- 8
fonts[i]
i <- 7
fonts[i]
fonts
i <- 10
radardf %>%
mutate(danceability = scale(danceability,center=F,scale=max(danceability,na.rm = T)/100),
energy = scale(energy,center=F,scale=max(energy,na.rm = T)/100),
loudness = scale((loudness+40),center=F,scale=max((loudness+40),na.rm = T)/100),
speechiness = scale(speechiness,center=F,scale=max(speechiness,na.rm = T)/100),
acousticness = scale(acousticness,center=F,scale=max(acousticness,na.rm = T)/100),
valence = scale(valence,center=F,scale=max(valence,na.rm = T)/100),
tempo = scale(tempo,center=F,scale=max(tempo,na.rm = T)/100),
liveness =scale(liveness, center=F,scale = max(liveness, na.rm=T)/100),
instrumentalness = scale(instrumentalness,center=F,scale=max(instrumentalness,na.rm = T)/100)
) %>%
gather(key = metric,c(danceability,
energy,
# speechiness,
acousticness,
instrumentalness,
#liveness,
valence,
loudness,
tempo
),
value=value) %>%
group_by(playlist_name) %>%
#  distinct(playlist_name)
# filter(playlist_name %in% c("Groove")) %>%
#arrange(metric) %>%
arrange(factor(metric, levels = order)) %>%
ggplot(aes(x=metric,y=value,group=interaction(playlist_name,metric),fill=playlist_name,color=playlist_name)) +
geom_polygon(aes(group=track.name),alpha=.01,size=.2)+
#geom_point(position="jitter") +
#geom_boxplot() +
scale_x_discrete(limits = order )+
#  scale_fill_manual(values=c("blue","red","yellow")) +
coord_polar()+
theme_minimal() +
labs(title= "Qualities of Songs per Playlist")+
theme(axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text.y = element_blank(),
plot.title = element_markdown(family=fonts[i],
hjust=.5),
text = element_markdown(family=fonts[i]))
i <- 12
radardf %>%
mutate(danceability = scale(danceability,center=F,scale=max(danceability,na.rm = T)/100),
energy = scale(energy,center=F,scale=max(energy,na.rm = T)/100),
loudness = scale((loudness+40),center=F,scale=max((loudness+40),na.rm = T)/100),
speechiness = scale(speechiness,center=F,scale=max(speechiness,na.rm = T)/100),
acousticness = scale(acousticness,center=F,scale=max(acousticness,na.rm = T)/100),
valence = scale(valence,center=F,scale=max(valence,na.rm = T)/100),
tempo = scale(tempo,center=F,scale=max(tempo,na.rm = T)/100),
liveness =scale(liveness, center=F,scale = max(liveness, na.rm=T)/100),
instrumentalness = scale(instrumentalness,center=F,scale=max(instrumentalness,na.rm = T)/100)
) %>%
gather(key = metric,c(danceability,
energy,
# speechiness,
acousticness,
instrumentalness,
#liveness,
valence,
loudness,
tempo
),
value=value) %>%
group_by(playlist_name) %>%
#  distinct(playlist_name)
# filter(playlist_name %in% c("Groove")) %>%
#arrange(metric) %>%
arrange(factor(metric, levels = order)) %>%
ggplot(aes(x=metric,y=value,group=interaction(playlist_name,metric),fill=playlist_name,color=playlist_name)) +
geom_polygon(aes(group=track.name),alpha=.01,size=.2)+
#geom_point(position="jitter") +
#geom_boxplot() +
scale_x_discrete(limits = order )+
#  scale_fill_manual(values=c("blue","red","yellow")) +
coord_polar()+
theme_minimal() +
labs(title= "Qualities of Songs per Playlist")+
theme(axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text.y = element_blank(),
plot.title = element_markdown(family=fonts[i],
hjust=.5),
text = element_markdown(family=fonts[i]))
fonts
i <- 13
radardf %>%
mutate(danceability = scale(danceability,center=F,scale=max(danceability,na.rm = T)/100),
energy = scale(energy,center=F,scale=max(energy,na.rm = T)/100),
loudness = scale((loudness+40),center=F,scale=max((loudness+40),na.rm = T)/100),
speechiness = scale(speechiness,center=F,scale=max(speechiness,na.rm = T)/100),
acousticness = scale(acousticness,center=F,scale=max(acousticness,na.rm = T)/100),
valence = scale(valence,center=F,scale=max(valence,na.rm = T)/100),
tempo = scale(tempo,center=F,scale=max(tempo,na.rm = T)/100),
liveness =scale(liveness, center=F,scale = max(liveness, na.rm=T)/100),
instrumentalness = scale(instrumentalness,center=F,scale=max(instrumentalness,na.rm = T)/100)
) %>%
gather(key = metric,c(danceability,
energy,
# speechiness,
acousticness,
instrumentalness,
#liveness,
valence,
loudness,
tempo
),
value=value) %>%
group_by(playlist_name) %>%
#  distinct(playlist_name)
# filter(playlist_name %in% c("Groove")) %>%
#arrange(metric) %>%
arrange(factor(metric, levels = order)) %>%
ggplot(aes(x=metric,y=value,group=interaction(playlist_name,metric),fill=playlist_name,color=playlist_name)) +
geom_polygon(aes(group=track.name),alpha=.01,size=.2)+
#geom_point(position="jitter") +
#geom_boxplot() +
scale_x_discrete(limits = order )+
#  scale_fill_manual(values=c("blue","red","yellow")) +
coord_polar()+
theme_minimal() +
labs(title= "Qualities of Songs per Playlist")+
theme(axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text.y = element_blank(),
plot.title = element_markdown(family=fonts[i],
hjust=.5),
text = element_markdown(family=fonts[i]))
library(extrafont)
radardf %>%
mutate(danceability = scale(danceability,center=F,scale=max(danceability,na.rm = T)/100),
energy = scale(energy,center=F,scale=max(energy,na.rm = T)/100),
loudness = scale((loudness+40),center=F,scale=max((loudness+40),na.rm = T)/100),
speechiness = scale(speechiness,center=F,scale=max(speechiness,na.rm = T)/100),
acousticness = scale(acousticness,center=F,scale=max(acousticness,na.rm = T)/100),
valence = scale(valence,center=F,scale=max(valence,na.rm = T)/100),
tempo = scale(tempo,center=F,scale=max(tempo,na.rm = T)/100),
liveness =scale(liveness, center=F,scale = max(liveness, na.rm=T)/100),
instrumentalness = scale(instrumentalness,center=F,scale=max(instrumentalness,na.rm = T)/100)
) %>%
gather(key = metric,c(danceability,
energy,
# speechiness,
acousticness,
instrumentalness,
#liveness,
valence,
loudness,
tempo
),
value=value) %>%
group_by(playlist_name) %>%
#  distinct(playlist_name)
# filter(playlist_name %in% c("Groove")) %>%
#arrange(metric) %>%
arrange(factor(metric, levels = order)) %>%
ggplot(aes(x=metric,y=value,group=interaction(playlist_name,metric),fill=playlist_name,color=playlist_name)) +
geom_polygon(aes(group=track.name),alpha=.01,size=.2)+
#geom_point(position="jitter") +
#geom_boxplot() +
scale_x_discrete(limits = order )+
#  scale_fill_manual(values=c("blue","red","yellow")) +
coord_polar()+
theme_minimal() +
labs(title= "Qualities of Songs per Playlist")+
theme(axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text.y = element_blank(),
plot.title = element_markdown(family=fonts[i],
hjust=.5),
text = element_markdown(family=fonts[i]))
fonts()
font <- "AppleMyungjo"
radardf %>%
mutate(danceability = scale(danceability,center=F,scale=max(danceability,na.rm = T)/100),
energy = scale(energy,center=F,scale=max(energy,na.rm = T)/100),
loudness = scale((loudness+40),center=F,scale=max((loudness+40),na.rm = T)/100),
speechiness = scale(speechiness,center=F,scale=max(speechiness,na.rm = T)/100),
acousticness = scale(acousticness,center=F,scale=max(acousticness,na.rm = T)/100),
valence = scale(valence,center=F,scale=max(valence,na.rm = T)/100),
tempo = scale(tempo,center=F,scale=max(tempo,na.rm = T)/100),
liveness =scale(liveness, center=F,scale = max(liveness, na.rm=T)/100),
instrumentalness = scale(instrumentalness,center=F,scale=max(instrumentalness,na.rm = T)/100)
) %>%
gather(key = metric,c(danceability,
energy,
# speechiness,
acousticness,
instrumentalness,
#liveness,
valence,
loudness,
tempo
),
value=value) %>%
group_by(playlist_name) %>%
#  distinct(playlist_name)
# filter(playlist_name %in% c("Groove")) %>%
#arrange(metric) %>%
arrange(factor(metric, levels = order)) %>%
ggplot(aes(x=metric,y=value,group=interaction(playlist_name,metric),fill=playlist_name,color=playlist_name)) +
geom_polygon(aes(group=track.name),alpha=.01,size=.2)+
#geom_point(position="jitter") +
#geom_boxplot() +
scale_x_discrete(limits = order )+
#  scale_fill_manual(values=c("blue","red","yellow")) +
coord_polar()+
theme_minimal() +
labs(title= "Qualities of Songs per Playlist")+
theme(axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text.y = element_blank(),
plot.title = element_markdown(family=font,
hjust=.5),
text = element_markdown(family=font))
fonts()
font <- "SimSin"
font <- "SimSun"
radardf %>%
mutate(danceability = scale(danceability,center=F,scale=max(danceability,na.rm = T)/100),
energy = scale(energy,center=F,scale=max(energy,na.rm = T)/100),
loudness = scale((loudness+40),center=F,scale=max((loudness+40),na.rm = T)/100),
speechiness = scale(speechiness,center=F,scale=max(speechiness,na.rm = T)/100),
acousticness = scale(acousticness,center=F,scale=max(acousticness,na.rm = T)/100),
valence = scale(valence,center=F,scale=max(valence,na.rm = T)/100),
tempo = scale(tempo,center=F,scale=max(tempo,na.rm = T)/100),
liveness =scale(liveness, center=F,scale = max(liveness, na.rm=T)/100),
instrumentalness = scale(instrumentalness,center=F,scale=max(instrumentalness,na.rm = T)/100)
) %>%
gather(key = metric,c(danceability,
energy,
# speechiness,
acousticness,
instrumentalness,
#liveness,
valence,
loudness,
tempo
),
value=value) %>%
group_by(playlist_name) %>%
#  distinct(playlist_name)
# filter(playlist_name %in% c("Groove")) %>%
#arrange(metric) %>%
arrange(factor(metric, levels = order)) %>%
ggplot(aes(x=metric,y=value,group=interaction(playlist_name,metric),fill=playlist_name,color=playlist_name)) +
geom_polygon(aes(group=track.name),alpha=.01,size=.2)+
#geom_point(position="jitter") +
#geom_boxplot() +
scale_x_discrete(limits = order )+
#  scale_fill_manual(values=c("blue","red","yellow")) +
coord_polar()+
theme_minimal() +
labs(title= "Qualities of Songs per Playlist")+
theme(axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text.y = element_blank(),
plot.title = element_markdown(family=font,
hjust=.5),
text = element_markdown(family=font))
fonts()
fonts <- fonts()
fonts
radardf %>%
mutate(danceability = scale(danceability,center=F,scale=max(danceability,na.rm = T)/100),
energy = scale(energy,center=F,scale=max(energy,na.rm = T)/100),
loudness = scale((loudness+40),center=F,scale=max((loudness+40),na.rm = T)/100),
speechiness = scale(speechiness,center=F,scale=max(speechiness,na.rm = T)/100),
acousticness = scale(acousticness,center=F,scale=max(acousticness,na.rm = T)/100),
valence = scale(valence,center=F,scale=max(valence,na.rm = T)/100),
tempo = scale(tempo,center=F,scale=max(tempo,na.rm = T)/100),
liveness =scale(liveness, center=F,scale = max(liveness, na.rm=T)/100),
instrumentalness = scale(instrumentalness,center=F,scale=max(instrumentalness,na.rm = T)/100)
) %>%
gather(key = metric,c(danceability,
energy,
# speechiness,
acousticness,
instrumentalness,
#liveness,
valence,
loudness,
tempo
),
value=value) %>%
group_by(playlist_name) %>%
#  distinct(playlist_name)
# filter(playlist_name %in% c("Groove")) %>%
#arrange(metric) %>%
arrange(factor(metric, levels = order)) %>%
ggplot(aes(x=metric,y=value,group=interaction(playlist_name,metric),fill=playlist_name,color=playlist_name)) +
geom_polygon(aes(group=track.name),alpha=.01,size=.2)+
#geom_point(position="jitter") +
#geom_boxplot() +
scale_x_discrete(limits = order )+
#  scale_fill_manual(values=c("blue","red","yellow")) +
coord_polar()+
theme_minimal() +
labs(title= "Qualities of Songs per Playlist")+
theme(axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text.y = element_blank(),
plot.title = element_markdown(family=fonts[i],
hjust=.5),
text = element_markdown(family=fonts[i]))
